// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

declare module "*.svg?raw" {
  const content: string;
  export default content;
}

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}

interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface MagisterAPI {
  authenticate: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getTodayInfo: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getUserInfo: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  logout: () => Promise<{ success: boolean; error?: string }>;
  isAuthenticated: () => Promise<{
    success: boolean;
    data?: boolean;
    error?: string;
  }>;
  testAPI: () => Promise<{ success: boolean; data?: unknown; error?: string }>;
  getAllStudents: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  clearToken: () => Promise<{ success: boolean; error?: string }>;
  fetchStudentPhoto: (
    studentId: number,
  ) => Promise<{ success: boolean; data?: string; error?: string }>;
}

interface StudentDBAPI {
  saveStudents: (
    students: unknown[],
  ) => Promise<{ success: boolean; error?: string }>;
  getAllStudents: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  searchStudents: (
    query: string,
  ) => Promise<{ success: boolean; data?: unknown; error?: string }>;
  getMetadata: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  clearAllData: () => Promise<{ success: boolean; error?: string }>;
  savePhoto: (
    externeId: string,
    photoData: string,
  ) => Promise<{ success: boolean; error?: string }>;
  getPhoto: (
    externeId: string,
  ) => Promise<{ success: boolean; data?: string | null; error?: string }>;
}

interface CurriculumAPI {
  getAllPlans: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getPlanByClass: (className: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  savePlan: (plan: unknown) => Promise<{ success: boolean; error?: string }>;
  deletePlan: (planId: string) => Promise<{ success: boolean; error?: string }>;
  exportPlanToDocx: (planId: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
}

interface TestAPI {
  getAllTests: () => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getTestsForClassGroup: (classGroup: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getTest: (testId: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  createTest: (test: unknown) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  updateTest: (
    testId: string,
    updates: unknown,
  ) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  deleteTest: (testId: string) => Promise<{
    success: boolean;
    error?: string;
  }>;
  getGradesForTest: (testId: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getGradesForStudent: (
    studentId: number,
    classGroup: string,
  ) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  saveGrade: (
    testId: string,
    studentId: number,
    pointsEarned: number,
    manualOverride?: number,
  ) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  saveCompositeGrade: (
    testId: string,
    studentId: number,
    elementGrades: unknown[],
    manualOverride?: number,
  ) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
  getTestStatistics: (testId: string) => Promise<{
    success: boolean;
    data?: unknown;
    error?: string;
  }>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  themeGlobal: {
    get: () => Promise<
      | "system"
      | "twitter"
      | "graphite"
      | "nord"
      | "dracula"
      | "solarized"
      | undefined
    >;
    set: (
      theme:
        | "system"
        | "twitter"
        | "graphite"
        | "nord"
        | "dracula"
        | "solarized",
    ) => Promise<boolean>;
  };
  electronWindow: ElectronWindow;
  magisterAPI: MagisterAPI;
  studentDBAPI: StudentDBAPI;
  curriculumAPI: CurriculumAPI;
  testAPI: TestAPI;
}
