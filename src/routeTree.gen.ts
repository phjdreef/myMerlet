/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestsRouteImport } from './routes/tests'
import { Route as StudentsRouteImport } from './routes/students'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SecondRouteImport } from './routes/second'
import { Route as PlanningRouteImport } from './routes/planning'
import { Route as MagisterRouteImport } from './routes/magister'
import { Route as IndexRouteImport } from './routes/index'

const TestsRoute = TestsRouteImport.update({
  id: '/tests',
  path: '/tests',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentsRoute = StudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SecondRoute = SecondRouteImport.update({
  id: '/second',
  path: '/second',
  getParentRoute: () => rootRouteImport,
} as any)
const PlanningRoute = PlanningRouteImport.update({
  id: '/planning',
  path: '/planning',
  getParentRoute: () => rootRouteImport,
} as any)
const MagisterRoute = MagisterRouteImport.update({
  id: '/magister',
  path: '/magister',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/magister': typeof MagisterRoute
  '/planning': typeof PlanningRoute
  '/second': typeof SecondRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
  '/tests': typeof TestsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/magister': typeof MagisterRoute
  '/planning': typeof PlanningRoute
  '/second': typeof SecondRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
  '/tests': typeof TestsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/magister': typeof MagisterRoute
  '/planning': typeof PlanningRoute
  '/second': typeof SecondRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
  '/tests': typeof TestsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/magister'
    | '/planning'
    | '/second'
    | '/settings'
    | '/students'
    | '/tests'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/magister'
    | '/planning'
    | '/second'
    | '/settings'
    | '/students'
    | '/tests'
  id:
    | '__root__'
    | '/'
    | '/magister'
    | '/planning'
    | '/second'
    | '/settings'
    | '/students'
    | '/tests'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MagisterRoute: typeof MagisterRoute
  PlanningRoute: typeof PlanningRoute
  SecondRoute: typeof SecondRoute
  SettingsRoute: typeof SettingsRoute
  StudentsRoute: typeof StudentsRoute
  TestsRoute: typeof TestsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tests': {
      id: '/tests'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof TestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/students': {
      id: '/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/second': {
      id: '/second'
      path: '/second'
      fullPath: '/second'
      preLoaderRoute: typeof SecondRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/planning': {
      id: '/planning'
      path: '/planning'
      fullPath: '/planning'
      preLoaderRoute: typeof PlanningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/magister': {
      id: '/magister'
      path: '/magister'
      fullPath: '/magister'
      preLoaderRoute: typeof MagisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MagisterRoute: MagisterRoute,
  PlanningRoute: PlanningRoute,
  SecondRoute: SecondRoute,
  SettingsRoute: SettingsRoute,
  StudentsRoute: StudentsRoute,
  TestsRoute: TestsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
